
import java.util.*;
class Node {
    int data;
    Node left;
    Node right;
    Node(int val){
        this.data=val;
        this.left=null;
        this.right=null;
    }
}
class BfsQueue {
    public static Node buildTree(List<Integer> inputs)
    {
        if(inputs==null || inputs.isEmpty()) return null;
        Iterator<Integer> it=inputs.iterator();
        Node root=new Node(it.next());
        
        Queue<Node> queue=new LinkedList<>();
        queue.add(root);
        while(it.hasNext()){
            Node current=queue.poll();
             int leftval=it.next();
            if(leftval != -1){
               current.left=new Node(leftval);
                queue.add(current.left);
            }
            
            if(it.hasNext()){
                int rightv=it.next();
                if(rightv!=-1){
                    current.right=new Node(rightv);
                    queue.add(current.right);
                }
            }
        }return root;
    }
    public static void bfs(Node root)
    {
        if(root==null) return ;
        Queue<Node> que=new LinkedList<>();
        que.add(root);
        while(!que.isEmpty()){
            Node current=que.poll();
            System.out.print(current.data+" ");
            if(current.left!=null){
                que.add(current.left);
            }
            if(current.right!=null){
                que.add(current.right);
            }
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<Integer> input=new ArrayList<>();
        while(sc.hasNextInt()){
            int val=sc.nextInt();
            input.add(val);
            
        }
        Node root=buildTree(input);
        bfs(root);
        sc.close();
    }
}












